var U=Object.defineProperty;var p=(e,t)=>{for(var o in t)U(e,o,{get:t[o],enumerable:!0})};var u=e=>{throw new Error("Not initialized yet")},f=typeof window>"u"&&typeof globalThis.WebSocketPair>"u";typeof Deno>"u"&&(self.Deno={args:[],build:{arch:"x86_64"},env:{get(){}}});var g=new Map,d=0;f&&(globalThis.syscall=async(e,...t)=>await new Promise((o,n)=>{d++,g.set(d,{resolve:o,reject:n}),u({type:"sys",id:d,name:e,args:t})}));function h(e,t,o){f&&(u=o,self.addEventListener("message",n=>{(async()=>{let i=n.data;switch(i.type){case"inv":{let m=e[i.name];if(!m)throw new Error(`Function not loaded: ${i.name}`);try{let c=await Promise.resolve(m(...i.args||[]));u({type:"invr",id:i.id,result:c})}catch(c){console.error("An exception was thrown as a result of invoking function",i.name,"error:",c.message),u({type:"invr",id:i.id,error:c.message})}}break;case"sysr":{let m=i.id,c=g.get(m);if(!c)throw Error("Invalid request id");g.delete(m),i.error?c.reject(new Error(i.error)):c.resolve(i.result)}break}})().catch(console.error)}),u({type:"manifest",manifest:t}))}function E(e){let t=atob(e),o=t.length,n=new Uint8Array(o);for(let i=0;i<o;i++)n[i]=t.charCodeAt(i);return n}function x(e){typeof e=="string"&&(e=new TextEncoder().encode(e));let t="",o=e.byteLength;for(let n=0;n<o;n++)t+=String.fromCharCode(e[n]);return btoa(t)}async function D(e,t){if(typeof e!="string"){let o=new Uint8Array(await e.arrayBuffer()),n=o.length>0?x(o):void 0;t={method:e.method,headers:Object.fromEntries(e.headers.entries()),base64Body:n},e=e.url}return syscall("sandboxFetch.fetch",e,t)}globalThis.nativeFetch=globalThis.fetch;function G(){globalThis.fetch=async function(e,t){let o=t&&t.body?x(new Uint8Array(await new Response(t.body).arrayBuffer())):void 0,n=await D(e,t&&{method:t.method,headers:t.headers,base64Body:o});return new Response(n.base64Body?E(n.base64Body):null,{status:n.status,headers:n.headers})}}f&&G();var s={};p(s,{confirm:()=>ue,copyToClipboard:()=>ve,deleteLine:()=>we,dispatch:()=>me,downloadFile:()=>J,filterBox:()=>ee,flashNotification:()=>Z,fold:()=>de,foldAll:()=>ye,getCurrentPage:()=>K,getCursor:()=>_,getSelection:()=>$,getText:()=>L,getUiOption:()=>le,goHistory:()=>H,hidePanel:()=>re,insertAtCursor:()=>ae,insertAtPos:()=>oe,moveCursor:()=>ie,moveCursorToLine:()=>se,navigate:()=>W,newWindow:()=>z,openCommandPalette:()=>O,openPageNavigator:()=>B,openSearchPanel:()=>be,openUrl:()=>Y,prompt:()=>ce,redo:()=>Pe,reloadConfigAndCommands:()=>V,reloadPage:()=>Q,reloadUI:()=>I,replaceRange:()=>ne,save:()=>j,setSelection:()=>q,setText:()=>N,setUiOption:()=>pe,showPanel:()=>te,toggleFold:()=>fe,undo:()=>xe,unfold:()=>ge,unfoldAll:()=>he,uploadFile:()=>X,vimEx:()=>Ce});typeof self>"u"&&(self={syscall:()=>{throw new Error("Not implemented here")}});function r(e,...t){return globalThis.syscall(e,...t)}function K(){return r("editor.getCurrentPage")}function L(){return r("editor.getText")}function N(e,t=!1){return r("editor.setText",e,t)}function _(){return r("editor.getCursor")}function $(){return r("editor.getSelection")}function q(e,t){return r("editor.setSelection",e,t)}function j(){return r("editor.save")}function W(e,t=!1,o=!1){return r("editor.navigate",e,t,o)}function B(e="page"){return r("editor.openPageNavigator",e)}function O(){return r("editor.openCommandPalette")}function Q(){return r("editor.reloadPage")}function I(){return r("editor.reloadUI")}function V(){return r("editor.reloadConfigAndCommands")}function Y(e,t=!1){return r("editor.openUrl",e,t)}function z(){return r("editor.newWindow")}function H(e){return r("editor.goHistory",e)}function J(e,t){return r("editor.downloadFile",e,t)}function X(e,t){return r("editor.uploadFile",e,t)}function Z(e,t="info"){return r("editor.flashNotification",e,t)}function ee(e,t,o="",n=""){return r("editor.filterBox",e,t,o,n)}function te(e,t,o,n=""){return r("editor.showPanel",e,t,o,n)}function re(e){return r("editor.hidePanel",e)}function oe(e,t){return r("editor.insertAtPos",e,t)}function ne(e,t,o){return r("editor.replaceRange",e,t,o)}function ie(e,t=!1){return r("editor.moveCursor",e,t)}function se(e,t=1,o=!1){return r("editor.moveCursorToLine",e,t,o)}function ae(e){return r("editor.insertAtCursor",e)}function me(e){return r("editor.dispatch",e)}function ce(e,t=""){return r("editor.prompt",e,t)}function ue(e){return r("editor.confirm",e)}function le(e){return r("editor.getUiOption",e)}function pe(e,t){return r("editor.setUiOption",e,t)}function de(){return r("editor.fold")}function ge(){return r("editor.unfold")}function fe(){return r("editor.toggleFold")}function ye(){return r("editor.foldAll")}function he(){return r("editor.unfoldAll")}function xe(){return r("editor.undo")}function Pe(){return r("editor.redo")}function be(){return r("editor.openSearchPanel")}function ve(e){return r("editor.copyToClipboard",e)}function we(){return r("editor.deleteLine")}function Ce(e){return r("editor.vimEx",e)}var l={};p(l,{applyAttributeExtractors:()=>Ue,getEnv:()=>Ke,getMode:()=>Le,getSpaceConfig:()=>Ee,getVersion:()=>Ne,invokeCommand:()=>Te,invokeFunction:()=>ke,invokeSpaceFunction:()=>Re,listCommands:()=>Me,listSyscalls:()=>Fe,reloadConfig:()=>Ge,reloadPlugs:()=>De});function ke(e,...t){return r("system.invokeFunction",e,...t)}function Te(e,t){return r("system.invokeCommand",e,t)}function Me(){return r("system.listCommands")}function Fe(){return r("system.listSyscalls")}function Re(e,...t){return r("system.invokeSpaceFunction",e,...t)}function Ue(e,t,o){return r("system.applyAttributeExtractors",e,t,o)}async function Ee(e,t){return await r("system.getSpaceConfig",e)??t}function De(){return r("system.reloadPlugs")}function Ge(){return r("system.reloadConfig")}function Ke(){return r("system.getEnv")}function Le(){return r("system.getMode")}function Ne(){return r("system.getVersion")}var a={};p(a,{run:()=>Ie});function Ie(e,t){return r("shell.run",e,t)}var P=/https:\/\/([^:]+):([^@]+)@gitlab\.com\/([^\/]+)\/([^\/\.]+)\.git/,b=/https:\/\/([^@]+)@github\.com\/([^\/]+)\/([^\/\.]+)\.git/;async function y(e){e||(e="Snapshot"),console.log("Snapshotting the current space to git with commit message",e);let{code:t}=await a.run("git",["add","./*"]);console.log("Git add code",t);try{await a.run("git",["commit","-a","-m",e])}catch{}console.log("Done!")}async function v(){let e=await s.prompt("Revision name:");e||(e="Snapshot"),console.log("Revision name",e),await y(e),await s.flashNotification("Done!")}async function w(){await s.flashNotification("Syncing with git"),await C(),await s.flashNotification("Git sync complete!")}async function C(){console.log("Going to sync with git"),await y(),console.log("Then pulling from remote"),await a.run("git",["pull"]),console.log("And then pushing to remote"),await a.run("git",["push"]),console.log("Done!")}async function A(e,t,o){let n=e.join("/")+".git";await s.flashNotification("Now going to clone the project, this may take some time."),await a.run("mkdir",["-p","_checkout"]),await a.run("git",["clone",n,"_checkout"]),await a.run("bash",["-c","mv -f _checkout/{.,}* . 2> /dev/null; true"]),await a.run("rm",["-rf","_checkout"]),await a.run("git",["config","user.name",t]),await a.run("git",["config","user.email",o]),await s.flashNotification("Done. Now just wait for sync to kick in to get all the content.")}async function S(){let e=await s.prompt("Github project URL:");if(!e)return;let t=await s.prompt("Github token:");if(!t)return;let o=await s.prompt("Your name:");if(!o)return;let n=await s.prompt("Your email:");if(!n)return;let i=e.split("/");i[2]=`${t}@${i[2]}`,await A(i,o,n)}async function k(){let e=await s.prompt("Gitlab project URL:");if(!e)return;let t=await s.prompt("Gitlab Username:");if(!t)return;let o=await s.prompt("Gitlab token:");if(!o)return;let n=await s.prompt("Your name:");if(!n)return;let i=await s.prompt("Your email:");if(!i)return;let m=e.split("/");m[2]=`${t}:${o}@${m[2]}`,await A(m,n,i)}async function T(){let e=await l.getSpaceConfig("git",{});e.autoCommitMinutes&&(console.log("Triggered auto commit with config",e),new Date().getMinutes()%e.autoCommitMinutes===0&&(console.log("Auto commit time!"),e.autoSync?await C():await y("Auto commit")))}function Xe(e){let t=e.match(b);if(!t)return null;let[o,n,i,m]=t;return[n,i,m]}function Ze(e){let t=e.match(P);if(!t)return null;let[o,n,i,m,c]=t;return[n,i,m,c]}function et(e,t){let o="";if(P.test(e)){let n=Ze(e);o=`https://${n[0]}:${t}@gitlab.com/${n[2]}/${n[3]}.git`}if(b.test(e)){let n=Xe(e);o=`https://${t}@github.com/${n[1]}/${n[2]}.git`}return o}async function M(){let e=await s.prompt("Enter new token:");if(!e)return;let t=(await a.run("git",["remote","get-url","origin"])).stdout.trim(),o=et(t,e);if(o.trim()==""){await s.flashNotification("Token replaced failed!");return}await a.run("git",["remote","set-url","origin",o]),await s.flashNotification("Token replaced successfully!")}var F={autoCommit:T,githubCloneCommand:S,gitlabCloneCommand:k,snapshotCommand:v,syncCommand:w,gitReplaceTokenCommand:M},R={name:"git",requiredPermissions:["shell"],functions:{autoCommit:{path:"git.ts:autoCommit",env:"server",cron:"* * * * *"},githubCloneCommand:{path:"./git.ts:githubCloneCommand",command:{name:"Github: Clone"}},gitlabCloneCommand:{path:"./git.ts:gitlabCloneCommand",command:{name:"Gitlab: Clone"}},snapshotCommand:{path:"./git.ts:snapshotCommand",command:{name:"Git: Snapshot"}},syncCommand:{path:"./git.ts:syncCommand",command:{name:"Git: Sync"}},gitReplaceTokenCommand:{path:"./git.ts:gitReplaceTokenCommand",command:{name:"Git: Replace Token"}}},assets:{}},Lt={manifest:R,functionMapping:F};h(F,R,self.postMessage);export{Lt as plug};
